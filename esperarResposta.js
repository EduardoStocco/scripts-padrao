const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// Verifica√ß√£o autom√°tica do ambiente
function checkEnvironment() {
    console.log('üîç Verificando ambiente...');
    
    // Verificar Node.js
    const nodeVersion = process.version;
    console.log(`‚úì Node.js ${nodeVersion} detectado`);
    
    // Verificar m√≥dulos nativos necess√°rios
    try {
        require('fs');
        require('path');
        require('child_process');
        console.log('‚úì Todos os m√≥dulos nativos est√£o dispon√≠veis');
    } catch (err) {
        console.error('‚ùå Erro ao carregar m√≥dulos nativos:', err.message);
        process.exit(1);
    }
    
    // Verificar se VS Code est√° dispon√≠vel (opcional)
    const { exec } = require('child_process');
    exec('code --version', (error) => {
        if (error) {
            console.log('‚ö†Ô∏è  VS Code n√£o detectado no PATH (ser√° necess√°rio para op√ß√£o 3)');
        } else {
            console.log('‚úì VS Code detectado e dispon√≠vel');
        }
    });
    
    console.log('‚úÖ Ambiente verificado com sucesso!\n');
}

// Executar verifica√ß√£o na inicializa√ß√£o
checkEnvironment();

console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë                    SCRIPT DE RESPOSTA v2.0.1             ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('\nSelecione uma op√ß√£o:');
console.log('1. üåÄ Nova tentativa');
console.log('2. üõ£Ô∏è Continue');
console.log('3. üìÉ INSTRU√á√ïES PERSONALIZADAS');
console.log('\nPressione o n√∫mero da op√ß√£o desejada...');

// Fun√ß√£o para criar nome de arquivo tempor√°rio √∫nico
function createTempFileName() {
    const now = new Date();
    const timestamp = now.toISOString().replace(/[:.]/g, '-').slice(0, -5);
    return path.join(__dirname, 'tmp-temporarios', `temp-${timestamp}.md`);
}

// Fun√ß√£o para garantir que o diret√≥rio tempor√°rio existe
function ensureTempDir() {
    const tempDir = path.join(__dirname, 'tmp-temporarios');
    if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
    }
}

// Fun√ß√£o para abrir arquivo no VS Code e monitorar mudan√ßas
function editInVSCode() {
    ensureTempDir();
    const tempFile = createTempFileName();
    
    // Criar arquivo tempor√°rio com conte√∫do inicial
    const initialContent = `# Instru√ß√µes para o Assistente GitHub Copilot

üí° Dica: Digite suas instru√ß√µes abaixo e salve o arquivo (Ctrl+S) para continuar.

## LISTA DE TAREFAS üìÉ

- (1) Exemplo de tarefa 1
- (2) Exemplo de tarefa 2

## FIM DAS INSTRU√á√ïES

`;
    
    try {
        fs.writeFileSync(tempFile, initialContent);
        console.log(`\n‚úì Arquivo tempor√°rio criado: ${tempFile}`);
        console.log('‚è≥ Abrindo VS Code...');
        
        // Abrir no VS Code
        const vscode = spawn('code', [tempFile], { 
            stdio: 'inherit',
            detached: true
        });
        
        vscode.on('error', (err) => {
            console.error('‚ùå Erro ao abrir VS Code:', err.message);
            console.log('üí° Certifique-se de que o VS Code est√° instalado e no PATH');
            process.exit(1);
        });
        
        console.log('üìù VS Code aberto! Edite o arquivo e salve (Ctrl+S) quando terminar.');
        console.log('‚è≥ Aguardando salvamento...\n');
        
        // Monitorar mudan√ßas no arquivo
        let lastModified = fs.statSync(tempFile).mtime;
        let isWatching = true;
        
        const watcher = fs.watch(tempFile, (eventType) => {
            if (eventType === 'change' && isWatching) {
                try {
                    const currentModified = fs.statSync(tempFile).mtime;
                    
                    // Verificar se o arquivo foi realmente modificado
                    if (currentModified > lastModified) {
                        lastModified = currentModified;
                        
                        // Aguardar um pequeno delay para garantir que o arquivo foi totalmente salvo
                        setTimeout(() => {
                            try {
                                const content = fs.readFileSync(tempFile, 'utf8');
                                
                                // Verificar se o conte√∫do mudou do inicial
                                if (content.trim() !== initialContent.trim()) {
                                    isWatching = false;
                                    watcher.close();
                                    
                                    console.log('‚úÖ Arquivo salvo detectado!\n');
                                    console.log('\x1b[32m[BEGIN_USER_INSTRUCTIONS]\x1b[0m');
                                    console.log('\x1b[32m' + content + '\x1b[0m');
                                    console.log('\x1b[32m[END_USER_INSTRUCTIONS]\x1b[0m\n');
                                    
                                    // Limpar arquivo tempor√°rio
                                    try {
                                        fs.unlinkSync(tempFile);
                                        console.log('üóëÔ∏è  Arquivo tempor√°rio removido.');
                                    } catch (cleanupErr) {
                                        console.error('‚ö†Ô∏è  N√£o foi poss√≠vel remover o arquivo tempor√°rio:', tempFile, cleanupErr.message);
                                    }
                                    
                                    process.exit(0);
                                }
                            } catch (readErr) {
                                console.error('‚ùå Erro ao ler arquivo:', readErr.message);
                            }
                        }, 500); // Delay de 500ms para garantir que o arquivo foi totalmente salvo
                    }
                } catch (statErr) {
                    // Arquivo pode ter sido temporariamente inacess√≠vel durante a escrita
                    // Isso √© normal durante opera√ß√µes de salvamento
                    console.debug('Arquivo temporariamente inacess√≠vel:', statErr.message);
                }
            }
        });
        
        // Capturar Ctrl+C para limpeza
        process.on('SIGINT', () => {
            console.log('\n\nüõë Opera√ß√£o cancelada pelo usu√°rio.');
            watcher.close();
            try {
                if (fs.existsSync(tempFile)) {
                    fs.unlinkSync(tempFile);
                    console.log('üóëÔ∏è  Arquivo tempor√°rio removido.');
                }
            } catch (cleanupErr) {
                console.error('‚ö†Ô∏è  N√£o foi poss√≠vel remover o arquivo tempor√°rio:', cleanupErr.message);
            }
            process.exit(0);
        });
        
    } catch (err) {
        console.error('‚ùå Erro ao criar arquivo tempor√°rio:', err.message);
        process.exit(1);
    }
}

// Configurar entrada de teclado
if (process.stdin.isTTY) {
    process.stdin.setRawMode(true);
}
process.stdin.resume();
process.stdin.setEncoding('utf8');

process.stdin.on('data', (key) => {
    const keyPressed = key.toString().trim();
    
    switch (keyPressed) {
        case '1':
            console.log('\nüåÄ Modo "Nova tentativa" selecionado');
            console.log('\x1b[32m[BEGIN_USER_INSTRUCTIONS]\nQuero que voc√™ volte e tente novamente a √∫ltima tarefa realizada.\n[END_USER_INSTRUCTIONS]\x1b[0m');
            process.exit(0);
            break;
            
        case '2':
            console.log('\nüõ£Ô∏è Modo "Continue" selecionado');
            console.log('\x1b[32m[BEGIN_USER_INSTRUCTIONS]\nContinue a execu√ß√£o. Pode prosseguir!\n[END_USER_INSTRUCTIONS]\x1b[0m');
            process.exit(0);
            break;
            
        case '3':
            console.log('\nüìù Modo de edi√ß√£o no VS Code selecionado.');
            editInVSCode();
            break;
            
        case '\u0003': // Ctrl+C
            console.log('\n\nüõë Script interrompido pelo usu√°rio.');
            process.exit(0);
            break;
            
        default:
            console.log(`\n‚ùå Op√ß√£o inv√°lida: "${keyPressed}"`);
            console.log('üí° Pressione 1, 2, 3, 4 ou 0 para sair.');
            break;
    }
});

console.log('\nüí° Pressione `Ctrl` + `C` a qualquer momento para sair.');